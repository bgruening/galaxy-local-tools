<tool id="fgenesh_annotate" name="FGENESH annotate" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="@PROFILE@" >
    <description>sequences</description>
    <macros>
	  <import>macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <expand macro="stdio" />
    <command><![CDATA[
	    #import re
	    mkdir -p result &&
	    mkdir -p output_gff &&
	    BLAST_PATH=\$(which blastp) > configfile &&
	    echo "BLASTP = \$BLAST_PATH" >> configfile &&
	    echo "BLAST2 = \$BLAST_PATH" >> configfile &&
	    echo "NUM_THREADS = \${GALAXY_SLOTS:-4}"  >> configfile &&
	    cat '$cfg' >> configfile &&

	    #if str($use_expression.type) == "2":
	    	mkdir -p read_dir &&
	        #for $input_file in $use_expression.read_directory:
            		ln -s '${input_file}' 'read_dir/${input_file.element_identifier}' &&
	    	#end for
            	sed -i "s|^DIR_SITES =.*|DIR_SITES = `pwd`/read_dir|g" configfile &&
	    #end if


	    ### cat seqlist - data preparation  &&
	    #if $inputs.input_type == 'single':
	    	#for $input in $inputs.single_seq
	    	   ln -fs '$input' $input.element_identifier &&
	    	   echo `pwd`/$input.element_identifier >> seqlist &&
		   echo `pwd`/$input.element_identifier > '$input.element_identifier'.list &&
	    	#end for
		sort seqlist > sorted_seqlist &&
	    #elif $inputs.input_type == 'multiple':
	    	#for $i,$input in enumerate($inputs.multiple_seq)
	    	    ln -fs '$input' $input.element_identifier &&
	    	    echo `pwd`/$input.element_identifier >> seqlist && 
		    echo `pwd`/$input.element_identifier > '$input.element_identifier'.list &&
	    	#end for
                sort seqlist > sorted_seqlist &&
	    #end if

	    ### cat seqlist
	    #if $inputs.input_type == 'single':
                for s in `cat sorted_seqlist`;
	    	do
		   #if $masked:
                   	echo  "run_pipe.pl configfile -f '\$s' $masked -d result_'\$(basename \$s)'";
	    	   #else
			echo  "run_pipe.pl configfile -f '\$s' -d result_'\$(basename \$s)'";
	    	   #end if
                done > fgenesh_parallel_command.sh &&

                cat fgenesh_parallel_command.sh | parallel --will-cite -j "\${GALAXY_SLOTS:-10}" &&

	    	####run_pipe.pl configfile -l seqlist  -d result && 
		mv result_*/* result/ &&
	    	run_fgenesh_2_gff3.pl result output_gff -sort -print_exons && 2>&1
	    #elif $inputs.input_type == 'multiple':
	    
	    	for s in `cat seqlist`;
	    	do
		   #if $masked:
	     	    	echo  "run_pipe.pl configfile -l '\$s'.list '$masked' -d result_'\$(basename \$s)'";
	    	   #else
	    		echo  "run_pipe.pl configfile -l '\$s'.list -d result_'\$(basename \$s)'";
	    	   #end if
	        done > fgenesh_parallel_command.sh &&

	    	cat fgenesh_parallel_command.sh | parallel --will-cite -j "\${GALAXY_SLOTS:-10}" && 
	    	###run_pipe.pl configfile -l seqlist -m seqlistN -d result &&
		mv result_*/* result/ &&
	    	run_fgenesh_2_gff3.pl result output_gff -sort -print_exons && 2>&1
	    #end if
		&& 2>&1	
	    ]]></command>
    <configfiles>
	    <configfile name="cfg"><![CDATA[
GENE_PARAM = ${matrix_type.species_matrix.fields.path}
PIPE_PARAM = ${db_type.genome_type.fields.path}
PREDICT_GC = ${predict_gc}
#if $map_mrna.mRNAs == '0'		    
MAP_mRNAs = ${map_mrna.mRNAs}
#else
MAP_mRNAs = ${map_mrna.mRNAs}
MRNA_FILE = ${map_mrna.mrna_file}
#end if
#if $use_expression.type == '0'
MAP_ESTS = ${use_expression.type}
USE_READS = ${use_expression.type}
#elif $use_expression.type == '1'
USE_READS = 0
MAP_ESTS = ${use_expression.type}
EST_FILE = ${use_expression.est_file}		    
#else
MAP_ESTS = 0
USE_READS = 1
DIR_SITES = ${use_expression.read_directory}
#end if
USE_PROTEINS = ${use_proteins}
PROTEIN_DB = ${nr_type.nr_db.fields.path}
PROTEIN_DB_INDEX = ${nr_type.nr_db.fields.path}.ind
PROTEIN_DB_TAG = NR
BLAST_AI_PROTEINS =  ${find_homologs} # find homologs for ab initio predicted genes ( 0 - no , 1 - yes)
INTRONIC_GENES = ${intronic_genes} 
             ]]></configfile>
    </configfiles>
    <inputs>
		<expand macro="acknowledgement"/>
	    <conditional name="inputs">
                <param name="input_type" type="select" label="Input type" help="Select single sequence or collection of sequence">
			<option value="single" selected="true">Single sequence</option>
			<option value="multiple">Multiple sequences</option>
		</param>
		<when value="single">
			<param name="single_seq" format="fasta" type="data" label="Single sequence" help="Single sequence" multiple="true"/>
		</when>
		<when value="multiple">
			<param name="multiple_seq" format="fasta" type="data_collection" collection_type="list" label="Multiple sequence"/>
		</when>
	    </conditional>
	    <param argument="-masked" type="boolean" truevalue="-masked" falsevalue="" checked="false" label="masked sequence" help="Input sequences are masked"/>
            <conditional name="matrix_type">
                  <param name="matrix_type_selector" type="select" label="Select matrix type" help="Select matrix for your species">
                         <option value="indexed" selected="true">Use a built-in index</option>
                         <option value="history">Use one from the history</option>
                  </param>
                  <when value="indexed">
                         <param name="species_matrix" type="select" label="Select a species matrix" help="If your species of interest is not listed, contact your Galaxy admin">
                          <options from_data_table="fgenesh_matrix">
                              <filter type="sort_by" column="2"/>
                              <validator type="no_options" message="No indexes are available for the selected input dataset"/>
                           </options>
                         </param>
                  </when>
                  <when value="history">
                       <param name="own_file" type="data" format="txt" label="Select species matrix" />
                  </when>
            </conditional>
            <conditional name="db_type">
		  <param name="db_type_selector" type="select" label="Select db type" help="Select Mammal DB / Non Mammal DB">
                         <option value="indexed" selected="true">Use a built-in index</option>
                         <option value="history">Use one from the history</option>
                  </param>
                  <when value="indexed">
                         <param name="genome_type" type="select" label="Select a reference database" help="If your database of interest is not listed, contact your Galaxy admin">
                          <options from_data_table="fgenesh_db_v2024">
                              <filter type="sort_by" column="2"/>
                              <validator type="no_options" message="No indexes are available for the selected input dataset"/>
                           </options>
                         </param>
                  </when>
                  <when value="history">
                       <param name="own_file" type="data" format="txt" label="Select reference database" />
                  </when>
	    </conditional>
            <conditional name="nr_type">
                  <param name="nr_type_selector" type="select" label="Select nr db type" help="Select NR database">
                         <option value="indexed" selected="true">Use a built-in index</option>
                         <option value="history">Use one from the history</option>
                  </param>
                  <when value="indexed">
                         <param name="nr_db" type="select" label="Select a NR database" help="If your database of interest is not listed, contact your Galaxy admin">
                          <options from_data_table="fgenesh_nr">
                              <filter type="sort_by" column="2"/>
                              <validator type="no_options" message="No indexes are available for the selected input dataset"/>
                           </options>
                         </param>
                  </when>
                  <when value="history">
                       <param name="own_file" type="data" format="txt" label="Select reference database" />
                  </when>
            </conditional>
            <conditional name="map_mrna">
                  <param name="mRNAs" type="select" label="mRNAs" help="map known mRNA data to the genomic sequences">
                        <option value="0">No</option>
                        <option value="1">Yes</option>
                  </param>
                  <when value="1">
		          <param name="mrna_file" type="data" format="fasta" label="mRNAs file" help="full length mRNAs fasta file"/>
                  </when>
                  <when value="0"/>
	    </conditional>
            <conditional name="use_expression">
                  <param name="type" type="select" label="Gene expression type" help="Use gene expression to improve gene model ">
                        <option value="0">No</option>
			<option value="1">ESTs</option>
			<option value="2">Read sites</option>		
		  </param>
                  <when value="1">
                          <param name="est_file" type="data" format="fasta" label="ESTs file" help="fasta file with ESTs; map ESTs to the genomic sequences"/>
		  </when>
		  <when value="2">
			  <param name="read_directory" format="txt" type="data_collection" collection_type="list" label="Read collection" help="read sites information"/>
		  </when>
		  <when value="0"/>
	    </conditional>
	    <param name="predict_gc" type="boolean" checked="false" truevalue="1" falsevalue="0" label="Predict GC" help="predict genes with GC donor splice sites or not"/>
	    <param name="find_homologs" type="boolean" checked="false" truevalue="1" falsevalue="0" label="Find homologs" help="find homologs for ab initio predicted genes"/>
            <param name="use_proteins" type="boolean" checked="false" truevalue="1" falsevalue="0" label="USE_PROTEINS" help="Using known proteins for prediction"/>
            <param name="intronic_genes" type="boolean" checked="false" truevalue="1" falsevalue="0" label="INTRONIC_GENES" help="predict genes in long introns of other genes"/>
    </inputs>
    <outputs>
	    <collection name="multiple_annotation" type="list" label="${tool.name} on ${on_string}: multiple annotation">
		  <discover_datasets pattern="(?P&lt;name&gt;.*).res$" format="txt" directory="result"/>
			  <!--<filter>input['input_type'] == 'multiple'</filter>-->
	    </collection>
            <collection name="annotated_gff3" type="list" label="${tool.name} on ${on_string}: GFF3">
                  <discover_datasets pattern="(?P&lt;name&gt;.*).gff3$" format="gff" directory="output_gff"/>
	    </collection>
    </outputs>
	
    <tests>
	 <test>
            <!-- #1 test -->
        </test>
    </tests>
    <help><![CDATA[
	    
.. class:: infomark

**What it does**
	    
*Fgenesh is a genome annotation tool*

**IMPORTANT**
Fgenesh (v2024.2) is no longer support cDNA, prot and dat file for mapping mRNA sequence to genomic sequences. A single full-length mRNAs fasta file is used. The full-length mRNAs fasta file can be made avaiavailable through transcriptome `de novo` assembly tool such as Trinity. Then, rename the header using `Fgenesh rename` to format the fasta file header before running `Fgenesh annotate` if `de novo` assembled transcripts is used. 


**Input**
	    
- input file  -  Genome or de novo assembly file or repeat masked file in FASTA format

**Command line Example:**

- A single fasta file (unmasked) - FGENESHPIPE/run_pipe.pl  human_prj.cfg  -f seq_1.fa -d results_1
- A list of fasta file (unmasked) - FGENESHPIPE/run_pipe.pl  human_prj.cfg  -l seq_1.list -d results_1

OR

- A single fasta file (masked) - FGENESHPIPE/run_pipe.pl  human_prj.cfg  -f seq_1.fa -masked -d results_1
- A list of fasta file (masked) - FGENESHPIPE/run_pipe.pl  human_prj.cfg  -l seq_1.list -masked -d results_1


- human_prj.cfg - a configuration file containing path to database, gene matrix and the settings of the third party softwares (i.e blast)
- seq_1.list - a list of chromosome / scaffolds (unmasked)
- results_1 - output folder



**Parameters:**

- matrix type - built-in index or select the index from the user history
- species matrix - select the gene matrix that matches the species of your input genome if built-in index in the matrix type is selected
- db type - built-in database or select the database from the user history
- reference database - fgenesh comes with Mammal DB / Non Mammal DB if built-in database in the db type is selected
- NR db type - built-in non-redundant database or select the non-redundant database from the user history
- NR database - select the non-redundant database for your species
- mRNAs - map known mRNA sequences to the genomic sequences (default: No). If Yes is selected, make sure .cdna, .pro and .dat files are available in the user history.
- Gene expression type - map ESTs to the genomic sequences or read sites (default: No) if Yes is selected, make sure there is ESTs fasta file or read sites (i.e collection) available in the user history
- Predict GC - predict genes with GC donor splice sites or not (default:No)
- USE_READS - use reads info to improve gene models (default:No)
- Find homologs - find homologs for ab initio predicted genes (0 - no, 1 - yes)
- USE_PROTEINS - Using known proteins for prediction (default: No)
- INTRONIC_GENES - Predicting genes in long introns of other genes (default: No)

**Output**

- txt (res) - raw output produced by Fgenesh
- gff3 - gff3 file format converted from the Fgenesh resn3 file

 
.. class:: infomark

**Contributor**

Galaxy Australia wrapped the Fgenesh: the original software is available on this website `FGENESH <http://www.softberry.com/berry.phtml?topic=fgenesh_plus_plus&group=help&subgroup=pipelines>`_. Note: The software license needs to be acquired prior to use.

	    
	]]></help>
	<expand macro="citations" />
</tool>
